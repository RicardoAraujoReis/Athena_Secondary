// <auto-generated />
using System;
using Athena.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AthenaContext))]
    [Migration("20250213121948_ATHENA12")]
    partial class ATHENA12
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Athena.Models.AtendimentoPlantao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Atd_identi");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Atd_cat_identi")
                        .HasColumnType("int");

                    b.Property<int>("Atd_cli_identi")
                        .HasColumnType("int");

                    b.Property<string>("Atd_crijir")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasAnnotation("CustomAnnotation", "Indica se foi criado Jira a partir deste Atendimento (1 - SIM / 0 - NÃO)");

                    b.Property<string>("Atd_critic")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasAnnotation("CustomAnnotation", "Criticidade do Tema (B - BAIXO / M - MÉDIO / A - ALTO / C - CRÍTICO)");

                    b.Property<DateTime?>("Atd_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Atd_datatd")
                        .HasColumnType("datetime2")
                        .HasAnnotation("CustomAnnotation", "Data do Plantão");

                    b.Property<DateTime>("Atd_datcri")
                        .HasColumnType("datetime2");

                    b.Property<string>("Atd_evoln1")
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasAnnotation("CustomAnnotation", "Tema em que o N1 precisa evoluir");

                    b.Property<string>("Atd_issue")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasAnnotation("CustomAnnotation", "Número do JIRA");

                    b.Property<string>("Atd_linjir")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Atd_nomal2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("CustomAnnotation", "Nome do analista N2 caso não seja o mesmo usuário a preencher o formulário");

                    b.Property<string>("Atd_observ")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("CustomAnnotation", "Observação");

                    b.Property<int>("Atd_ptd_identi")
                        .HasColumnType("int");

                    b.Property<string>("Atd_ren1hm")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasAnnotation("CustomAnnotation", "Resolveria se o N1 tivesse testado em HOM? (1 - SIM / 0 - NÃO)");

                    b.Property<string>("Atd_resn1")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasAnnotation("CustomAnnotation", "Resolveria N1? (1 - SIM / 0 - NÃO)");

                    b.Property<string>("Atd_resplt")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasAnnotation("CustomAnnotation", "Tema resolvido no mesmo plantão? (1 - SIM / 0 - NÃO)");

                    b.Property<string>("Atd_respn2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("CustomAnnotation", "Resposta do N2 ao Tema");

                    b.Property<string>("Atd_resumo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("CustomAnnotation", "Resumo do Tema");

                    b.Property<string>("Atd_status")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasAnnotation("CustomAnnotation", "Status do Atendimento");

                    b.Property<string>("Atd_tipatd")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasAnnotation("CustomAnnotation", "Tipo do Atendimento (DÚVIDA / SOLICITAÇÃO / PROBLEMA)");

                    b.Property<string>("Atd_titulo")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasAnnotation("CustomAnnotation", "Título do Atendimento");

                    b.Property<int>("Atd_usu_identi")
                        .HasColumnType("int");

                    b.Property<int?>("Atd_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Atd_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Atd_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Atd_verjir")
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)");

                    b.HasKey("Id");

                    b.HasIndex("Atd_cat_identi");

                    b.HasIndex("Atd_cli_identi");

                    b.HasIndex("Atd_ptd_identi")
                        .IsUnique();

                    b.HasIndex("Atd_usu_identi");

                    b.ToTable("AtendimentoPlantao", "Athena");
                });

            modelBuilder.Entity("Athena.Models.CategoriaAtendimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cat_identi");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cat_ativo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("Cat_catpai")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasAnnotation("CustomAnnotation", "ID da Categoria referência no nível anterior");

                    b.Property<DateTime?>("Cat_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Cat_datcri")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cat_despai")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Cat_nivel")
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasAnnotation("CustomAnnotation", "Nível da Categoria");

                    b.Property<int?>("Cat_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Cat_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Cat_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Cat_valor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasAnnotation("CustomAnnotation", "Valor da Categoria");

                    b.HasKey("Id");

                    b.ToTable("CategoriaAtendimento", (string)null);
                });

            modelBuilder.Entity("Athena.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cli_identi");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cli_ativo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasAnnotation("CustomAnnotation", "Indica se o Cliente está ativo ou não (S - SIM / N - NÃO)");

                    b.Property<DateTime?>("Cli_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Cli_datcri")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cli_descri")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("CustomAnnotation", "Descrição do Cliente");

                    b.Property<int>("Cli_lhn_identi")
                        .HasColumnType("int");

                    b.Property<int?>("Cli_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Cli_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Cli_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cli_lhn_identi");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("Athena.Models.DadosListas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Dal_identi");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Dal_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Dal_datcri")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dal_tid_descri")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Dal_tid_identi")
                        .HasColumnType("int");

                    b.Property<int?>("Dal_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Dal_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Dal_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Dal_valor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("CustomAnnotation", "Valor a ser exibido no campo de lista");

                    b.HasKey("Id");

                    b.HasIndex("Dal_tid_identi");

                    b.ToTable("DadosListas", (string)null);
                });

            modelBuilder.Entity("Athena.Models.DepFunc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Dfc_identi");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Dfc_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Dfc_datcri")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dfc_dpt_identi")
                        .HasColumnType("int");

                    b.Property<int>("Dfc_fnc_identi")
                        .HasColumnType("int");

                    b.Property<int>("Dfc_usu_identi")
                        .HasColumnType("int");

                    b.Property<int?>("Dfc_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Dfc_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Dfc_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Dfc_dpt_identi");

                    b.HasIndex("Dfc_fnc_identi");

                    b.HasIndex("Dfc_usu_identi");

                    b.ToTable("DepFunc", (string)null);
                });

            modelBuilder.Entity("Athena.Models.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Dpt_identi");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Dpt_ativo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasAnnotation("CustomAnnotation", "Indica se o Departamento está ativo ou não (S - SIM / N - NÃO)");

                    b.Property<DateTime?>("Dpt_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Dpt_datcri")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dpt_descri")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("CustomAnnotation", "Nome do Departamento");

                    b.Property<int?>("Dpt_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Dpt_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Dpt_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Departamento", (string)null);
                });

            modelBuilder.Entity("Athena.Models.Funcao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Fnc_identi");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Fnc_ativo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasAnnotation("CustomAnnotation", "Indica se a Função está ativa ou não (S - SIM / N - NÃO)");

                    b.Property<DateTime?>("Fnc_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Fnc_datcri")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fnc_descri")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("CustomAnnotation", "Descrição da Função");

                    b.Property<int?>("Fnc_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Fnc_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Fnc_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Funcao", (string)null);
                });

            modelBuilder.Entity("Athena.Models.LinhaNegocio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Lhn_identi");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Lhn_ativo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasAnnotation("CustomAnnotation", "Indica se a Linha de Negócio está ativa ou não (S - SIM / N - NÃO)");

                    b.Property<DateTime?>("Lhn_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Lhn_datcri")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lhn_descri")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("CustomAnnotation", "Descrição da Linha de Negócio");

                    b.Property<int?>("Lhn_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Lhn_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Lhn_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LinhaNegocio", (string)null);
                });

            modelBuilder.Entity("Athena.Models.PreAtendimentoPlantao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Ptd_identi");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ptd_cli_identi")
                        .HasColumnType("int");

                    b.Property<string>("Ptd_critic")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasAnnotation("CustomAnnotation", "Criticidade do Tema (B - BAIXO / M - MÉDIO / A - ALTO / C - CRÍTICO)");

                    b.Property<DateTime?>("Ptd_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Ptd_datcri")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Ptd_datptd")
                        .HasColumnType("datetime2")
                        .HasAnnotation("CustomAnnotation", "Data do Pré Atendimento");

                    b.Property<string>("Ptd_diagn1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("CustomAnnotation", "Análise realizada pelo N1");

                    b.Property<string>("Ptd_jirarl")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasAnnotation("CustomAnnotation", "Existe Jira relacionado? (S - SIM / N - NÃO)");

                    b.Property<string>("Ptd_linjir")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("CustomAnnotation", "Link do Jira");

                    b.Property<string>("Ptd_nomal1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("CustomAnnotation", "Nome do analista N1 caso não seja o mesmo usuário a preencher o formulário");

                    b.Property<int?>("Ptd_numatd")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasAnnotation("CustomAnnotation", "Número do Atendimento gerado (se houver)");

                    b.Property<string>("Ptd_numcha")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasAnnotation("CustomAnnotation", "Número do chamado");

                    b.Property<string>("Ptd_numjir")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasAnnotation("CustomAnnotation", "Número do Jira");

                    b.Property<string>("Ptd_observ")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("CustomAnnotation", "Observação");

                    b.Property<string>("Ptd_resumo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("CustomAnnotation", "Resumo do Tema");

                    b.Property<string>("Ptd_reton2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("CustomAnnotation", "Resposta do N2");

                    b.Property<string>("Ptd_status")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasAnnotation("CustomAnnotation", "Status do Pré Atendimento");

                    b.Property<string>("Ptd_tipptd")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasAnnotation("CustomAnnotation", "Tipo do Pré Atendimento (DÚVIDA / SOLICITAÇÃO / PROBLEMA)");

                    b.Property<string>("Ptd_titulo")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasAnnotation("CustomAnnotation", "Título do Pré Atendimento");

                    b.Property<int>("Ptd_usu_identi")
                        .HasColumnType("int");

                    b.Property<int?>("Ptd_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Ptd_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Ptd_usucri")
                        .HasColumnType("int");

                    b.Property<string>("Ptd_verjir")
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasAnnotation("CustomAnnotation", "Versão do Jira");

                    b.HasKey("Id");

                    b.HasIndex("Ptd_cli_identi");

                    b.HasIndex("Ptd_usu_identi");

                    b.ToTable("PreAtendimentoPlantao", (string)null);
                });

            modelBuilder.Entity("Athena.Models.TipoDadosListas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Tid_identi");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Tid_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Tid_datcri")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tid_descri")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("CustomAnnotation", "Descrição do tipo de dados de listas");

                    b.Property<int?>("Tid_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Tid_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Tid_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TipoDadosListas", (string)null);
                });

            modelBuilder.Entity("Athena.Models.UsuLhn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Uln_identi");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Uln_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Uln_datcri")
                        .HasColumnType("datetime2");

                    b.Property<int>("Uln_lhn_identi")
                        .HasColumnType("int");

                    b.Property<int>("Uln_usu_identi")
                        .HasColumnType("int");

                    b.Property<int?>("Uln_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Uln_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Uln_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Uln_lhn_identi");

                    b.HasIndex("Uln_usu_identi");

                    b.ToTable("UsuLhn", (string)null);
                });

            modelBuilder.Entity("Athena.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Usu_identi");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Usu_ativo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasAnnotation("CustomAnnotation", "Indica se o Usuário está ativo ou não (S - SIM / N - NÃO)");

                    b.Property<DateTime?>("Usu_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Usu_datcri")
                        .HasColumnType("datetime2");

                    b.Property<string>("Usu_descri")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("CustomAnnotation", "Nome completo do Usuário");

                    b.Property<string>("Usu_email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("CustomAnnotation", "E-mail do Usuário");

                    b.Property<string>("Usu_login")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasAnnotation("CustomAnnotation", "Login do Usuário");

                    b.Property<string>("Usu_master")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasAnnotation("CustomAnnotation", "Indica se o Usuário é super Usuário (S - SIM / N - NÃO)");

                    b.Property<string>("Usu_senha")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasAnnotation("CustomAnnotation", "Senha do Usuário");

                    b.Property<string>("Usu_status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasAnnotation("CustomAnnotation", "Indica se o Usuário está bloqueado (S - SIM / N - NÃO)");

                    b.Property<string>("Usu_tipusu")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasAnnotation("CustomAnnotation", "Tipo do Usuário (N1 - 0, N2 - 1, ADM - 2, SYS - 3)");

                    b.Property<int?>("Usu_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Usu_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Usu_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("Models.ComentariosAtendimentoPlantao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cap_atd_identi")
                        .HasColumnType("int");

                    b.Property<string>("Cap_coment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Cap_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Cap_datcri")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Cap_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Cap_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Cap_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cap_atd_identi");

                    b.ToTable("ComentariosAtendimentoPlantao", "Athena");
                });

            modelBuilder.Entity("Athena.Models.AtendimentoPlantao", b =>
                {
                    b.HasOne("Athena.Models.CategoriaAtendimento", "CategoriaAtendimento")
                        .WithMany("Atendimentos")
                        .HasForeignKey("Atd_cat_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Atd_cat_identi");

                    b.HasOne("Athena.Models.Cliente", "Cliente")
                        .WithMany("Atendimentos")
                        .HasForeignKey("Atd_cli_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Atd_cli_identi");

                    b.HasOne("Athena.Models.PreAtendimentoPlantao", "PreAtendimentoPlantao")
                        .WithOne("AtendimentoPlantao")
                        .HasForeignKey("Athena.Models.AtendimentoPlantao", "Atd_ptd_identi")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Atd_ptd_identi");

                    b.HasOne("Athena.Models.Usuario", "Usuario")
                        .WithMany("Atendimentos")
                        .HasForeignKey("Atd_usu_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Atd_usu_identi");

                    b.Navigation("CategoriaAtendimento");

                    b.Navigation("Cliente");

                    b.Navigation("PreAtendimentoPlantao");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Athena.Models.Cliente", b =>
                {
                    b.HasOne("Athena.Models.LinhaNegocio", "LinhaNegocio")
                        .WithMany("Clientes")
                        .HasForeignKey("Cli_lhn_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Cli_lhn_identi");

                    b.Navigation("LinhaNegocio");
                });

            modelBuilder.Entity("Athena.Models.DadosListas", b =>
                {
                    b.HasOne("Athena.Models.TipoDadosListas", "TipoDadosListas")
                        .WithMany("DadosListas")
                        .HasForeignKey("Dal_tid_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Dal_tid_identi");

                    b.Navigation("TipoDadosListas");
                });

            modelBuilder.Entity("Athena.Models.DepFunc", b =>
                {
                    b.HasOne("Athena.Models.Departamento", "Departamento")
                        .WithMany("DepFuncs")
                        .HasForeignKey("Dfc_dpt_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Dfc_dpt_identi");

                    b.HasOne("Athena.Models.Funcao", "Funcao")
                        .WithMany("DepFuncs")
                        .HasForeignKey("Dfc_fnc_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Dfc_fnc_identi");

                    b.HasOne("Athena.Models.Usuario", "Usuario")
                        .WithMany("DepFuncs")
                        .HasForeignKey("Dfc_usu_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Dfc_usu_identi");

                    b.Navigation("Departamento");

                    b.Navigation("Funcao");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Athena.Models.PreAtendimentoPlantao", b =>
                {
                    b.HasOne("Athena.Models.Cliente", "Cliente")
                        .WithMany("PreAtendimentos")
                        .HasForeignKey("Ptd_cli_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Ptd_cli_identi");

                    b.HasOne("Athena.Models.Usuario", "Usuario")
                        .WithMany("PreAtendimentos")
                        .HasForeignKey("Ptd_usu_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Ptd_usu_identi");

                    b.Navigation("Cliente");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Athena.Models.UsuLhn", b =>
                {
                    b.HasOne("Athena.Models.LinhaNegocio", "LinhaNegocio")
                        .WithMany("UsuLhn")
                        .HasForeignKey("Uln_lhn_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Uln_lhn_identi");

                    b.HasOne("Athena.Models.Usuario", "Usuario")
                        .WithMany("UsuLhn")
                        .HasForeignKey("Uln_usu_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Uln_usu_identi");

                    b.Navigation("LinhaNegocio");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Models.ComentariosAtendimentoPlantao", b =>
                {
                    b.HasOne("Athena.Models.AtendimentoPlantao", "Atendimento")
                        .WithMany("Comentarios")
                        .HasForeignKey("Cap_atd_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Cap_atd_identi");

                    b.Navigation("Atendimento");
                });

            modelBuilder.Entity("Athena.Models.AtendimentoPlantao", b =>
                {
                    b.Navigation("Comentarios");
                });

            modelBuilder.Entity("Athena.Models.CategoriaAtendimento", b =>
                {
                    b.Navigation("Atendimentos");
                });

            modelBuilder.Entity("Athena.Models.Cliente", b =>
                {
                    b.Navigation("Atendimentos");

                    b.Navigation("PreAtendimentos");
                });

            modelBuilder.Entity("Athena.Models.Departamento", b =>
                {
                    b.Navigation("DepFuncs");
                });

            modelBuilder.Entity("Athena.Models.Funcao", b =>
                {
                    b.Navigation("DepFuncs");
                });

            modelBuilder.Entity("Athena.Models.LinhaNegocio", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("UsuLhn");
                });

            modelBuilder.Entity("Athena.Models.PreAtendimentoPlantao", b =>
                {
                    b.Navigation("AtendimentoPlantao");
                });

            modelBuilder.Entity("Athena.Models.TipoDadosListas", b =>
                {
                    b.Navigation("DadosListas");
                });

            modelBuilder.Entity("Athena.Models.Usuario", b =>
                {
                    b.Navigation("Atendimentos");

                    b.Navigation("DepFuncs");

                    b.Navigation("PreAtendimentos");

                    b.Navigation("UsuLhn");
                });
#pragma warning restore 612, 618
        }
    }
}
