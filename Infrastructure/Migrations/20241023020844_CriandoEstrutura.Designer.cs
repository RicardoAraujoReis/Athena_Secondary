// <auto-generated />
using System;
using Athena.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AthenaContext))]
    [Migration("20241023020844_CriandoEstrutura")]
    partial class CriandoEstrutura
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Athena.Models.AtendimentoPlantao", b =>
                {
                    b.Property<int>("atd_identi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("atd_identi"));

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("atd_cat_identi")
                        .HasColumnType("int");

                    b.Property<int>("atd_cli_identi")
                        .HasColumnType("int");

                    b.Property<string>("atd_crijir")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Indica se foi criado Jira a partir deste Atendimento (1 - SIM / 0 - NÃO)");

                    b.Property<string>("atd_critic")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Criticidade do Tema (B - BAIXO / M - MÉDIO / A - ALTO / C - CRÍTICO)");

                    b.Property<DateTime>("atd_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("atd_datatd")
                        .HasColumnType("datetime2")
                        .HasComment("Data do Plantão");

                    b.Property<DateTime>("atd_datcri")
                        .HasColumnType("datetime2");

                    b.Property<string>("atd_evoln1")
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasComment("Tema em que o N1 precisa evoluir");

                    b.Property<string>("atd_issue")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Número do JIRA");

                    b.Property<string>("atd_nomal2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Nome do analista N2 caso não seja o mesmo usuário a preencher o formulário");

                    b.Property<string>("atd_observ")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Observação");

                    b.Property<int>("atd_ptd_identi")
                        .HasColumnType("int");

                    b.Property<string>("atd_ren1hm")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Resolveria se o N1 tivesse testado em HOM? (1 - SIM / 0 - NÃO)");

                    b.Property<string>("atd_resn1")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Resolveria N1? (1 - SIM / 0 - NÃO)");

                    b.Property<string>("atd_resplt")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Tema resolvido no mesmo plantão? (1 - SIM / 0 - NÃO)");

                    b.Property<string>("atd_respn2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Resposta do N2 ao Tema");

                    b.Property<string>("atd_resumo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Resumo do Tema");

                    b.Property<string>("atd_status")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Status do Atendimento");

                    b.Property<string>("atd_tipatd")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Tipo do Atendimento (DÚVIDA / SOLICITAÇÃO / PROBLEMA)");

                    b.Property<int>("atd_usu_identi")
                        .HasColumnType("int");

                    b.Property<int>("atd_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("atd_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("atd_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("atd_identi");

                    b.HasIndex("atd_cat_identi");

                    b.HasIndex("atd_cli_identi");

                    b.HasIndex("atd_ptd_identi")
                        .IsUnique();

                    b.HasIndex("atd_usu_identi");

                    b.ToTable("AtendimentoPlantao", "Athena");
                });

            modelBuilder.Entity("Athena.Models.CategoriaAtendimento", b =>
                {
                    b.Property<int>("cat_identi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cat_identi"));

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("cat_catpai")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasComment("ID da Categoria referência no nível anterior");

                    b.Property<DateTime>("cat_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("cat_datcri")
                        .HasColumnType("datetime2");

                    b.Property<int>("cat_nivel")
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasComment("Nível da Categoria");

                    b.Property<int>("cat_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("cat_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("cat_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("cat_valor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Valor da Categoria");

                    b.HasKey("cat_identi");

                    b.ToTable("CategoriaAtendimento", (string)null);
                });

            modelBuilder.Entity("Athena.Models.Cliente", b =>
                {
                    b.Property<int>("cli_identi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cli_identi"));

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("cli_ativo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Indica se o Cliente está ativo ou não (S - SIM / N - NÃO)");

                    b.Property<DateTime>("cli_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("cli_datcri")
                        .HasColumnType("datetime2");

                    b.Property<string>("cli_descri")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Descrição do Cliente");

                    b.Property<int>("cli_lhn_identi")
                        .HasColumnType("int");

                    b.Property<int>("cli_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("cli_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("cli_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("cli_identi");

                    b.HasIndex("cli_lhn_identi");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("Athena.Models.DadosListas", b =>
                {
                    b.Property<int>("dal_identi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("dal_identi"));

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("dal_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dal_datcri")
                        .HasColumnType("datetime2");

                    b.Property<int>("dal_tid_identi")
                        .HasColumnType("int");

                    b.Property<int>("dal_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("dal_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("dal_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("dal_valor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Valor a ser exibido no campo de lista");

                    b.HasKey("dal_identi");

                    b.HasIndex("dal_tid_identi");

                    b.ToTable("DadosListas", (string)null);
                });

            modelBuilder.Entity("Athena.Models.DepFunc", b =>
                {
                    b.Property<int>("dfc_identi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("dfc_identi"));

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("dfc_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dfc_datcri")
                        .HasColumnType("datetime2");

                    b.Property<int>("dfc_dpt_identi")
                        .HasColumnType("int");

                    b.Property<int>("dfc_fnc_identi")
                        .HasColumnType("int");

                    b.Property<int>("dfc_usu_identi")
                        .HasColumnType("int");

                    b.Property<int>("dfc_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("dfc_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("dfc_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("dfc_identi");

                    b.HasIndex("dfc_dpt_identi");

                    b.HasIndex("dfc_fnc_identi");

                    b.HasIndex("dfc_usu_identi");

                    b.ToTable("DepFunc", (string)null);
                });

            modelBuilder.Entity("Athena.Models.Departamento", b =>
                {
                    b.Property<int>("dpt_identi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("dpt_identi"));

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("dpt_ativo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Indica se o Departamento está ativo ou não (S - SIM / N - NÃO)");

                    b.Property<DateTime>("dpt_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dpt_datcri")
                        .HasColumnType("datetime2");

                    b.Property<string>("dpt_descri")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Nome do Departamento");

                    b.Property<int>("dpt_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("dpt_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("dpt_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("dpt_identi");

                    b.ToTable("Departamento", (string)null);
                });

            modelBuilder.Entity("Athena.Models.Funcao", b =>
                {
                    b.Property<int>("fnc_identi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("fnc_identi"));

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("fnc_ativo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Indica se a Função está ativa ou não (S - SIM / N - NÃO)");

                    b.Property<DateTime>("fnc_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fnc_datcri")
                        .HasColumnType("datetime2");

                    b.Property<string>("fnc_descri")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Descrição da Função");

                    b.Property<int>("fnc_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("fnc_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("fnc_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("fnc_identi");

                    b.ToTable("Funcao", (string)null);
                });

            modelBuilder.Entity("Athena.Models.LinhaNegocio", b =>
                {
                    b.Property<int>("lhn_identi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("lhn_identi"));

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("lhn_ativo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Indica se a Linha de Negócio está ativa ou não (S - SIM / N - NÃO)");

                    b.Property<DateTime>("lhn_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("lhn_datcri")
                        .HasColumnType("datetime2");

                    b.Property<string>("lhn_descri")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Descrição da Linha de Negócio");

                    b.Property<int>("lhn_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("lhn_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("lhn_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("lhn_identi");

                    b.ToTable("LinhaNegocio", (string)null);
                });

            modelBuilder.Entity("Athena.Models.PreAtendimentoPlantao", b =>
                {
                    b.Property<int>("ptd_identi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ptd_identi"));

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ptd_cli_identi")
                        .HasColumnType("int");

                    b.Property<string>("ptd_critic")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Criticidade do Tema (B - BAIXO / M - MÉDIO / A - ALTO / C - CRÍTICO)");

                    b.Property<DateTime>("ptd_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ptd_datcri")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ptd_datptd")
                        .HasColumnType("datetime2")
                        .HasComment("Data do Pré Atendimento");

                    b.Property<string>("ptd_diagn1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Análise realizada pelo N1");

                    b.Property<string>("ptd_jirarl")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Existe Jira relacionado? (S - SIM / N - NÃO)");

                    b.Property<string>("ptd_nomal1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Nome do analista N1 caso não seja o mesmo usuário a preencher o formulário");

                    b.Property<int>("ptd_numatd")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasComment("Número do Atendimento gerado (se houver)");

                    b.Property<string>("ptd_numcha")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Número do chamado");

                    b.Property<string>("ptd_numjir")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Número do Jira");

                    b.Property<string>("ptd_observ")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Observação");

                    b.Property<string>("ptd_resumo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Resumo do Tema");

                    b.Property<string>("ptd_reton2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Resposta do N2");

                    b.Property<string>("ptd_status")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Status do Pré Atendimento");

                    b.Property<string>("ptd_tipptd")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Tipo do Pré Atendimento (DÚVIDA / SOLICITAÇÃO / PROBLEMA)");

                    b.Property<int>("ptd_usu_identi")
                        .HasColumnType("int");

                    b.Property<int>("ptd_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("ptd_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ptd_usucri")
                        .HasColumnType("int");

                    b.HasKey("ptd_identi");

                    b.HasIndex("ptd_cli_identi");

                    b.HasIndex("ptd_usu_identi");

                    b.ToTable("PreAtendimentoPlantao", (string)null);
                });

            modelBuilder.Entity("Athena.Models.TipoDadosListas", b =>
                {
                    b.Property<int>("tid_identi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("tid_identi"));

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("tid_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("tid_datcri")
                        .HasColumnType("datetime2");

                    b.Property<string>("tid_descri")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Descrição do tipo de dados de listas");

                    b.Property<int>("tid_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("tid_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("tid_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("tid_identi");

                    b.ToTable("TipoDadosListas", (string)null);
                });

            modelBuilder.Entity("Athena.Models.UsuLhn", b =>
                {
                    b.Property<int>("uln_identi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("uln_identi"));

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("uln_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("uln_datcri")
                        .HasColumnType("datetime2");

                    b.Property<int>("uln_lhn_identi")
                        .HasColumnType("int");

                    b.Property<int>("uln_usu_identi")
                        .HasColumnType("int");

                    b.Property<int>("uln_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("uln_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("uln_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("uln_identi");

                    b.HasIndex("uln_lhn_identi");

                    b.HasIndex("uln_usu_identi");

                    b.ToTable("UsuLhn", (string)null);
                });

            modelBuilder.Entity("Athena.Models.Usuario", b =>
                {
                    b.Property<int>("usu_identi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("usu_identi"));

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("usu_ativo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Indica se o usuário está ativo ou não (S - SIM / N - NÃO)");

                    b.Property<DateTime>("usu_datalt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("usu_datcri")
                        .HasColumnType("datetime2");

                    b.Property<string>("usu_descri")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Nome completo do usuário");

                    b.Property<string>("usu_email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("E-mail do usuário");

                    b.Property<string>("usu_login")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Login do usuário");

                    b.Property<string>("usu_master")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Indica se o usuário é super usuário (S - SIM / N - NÃO)");

                    b.Property<string>("usu_senha")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)")
                        .HasComment("Senha do usuário");

                    b.Property<string>("usu_status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Indica se o usuário está bloqueado (S - SIM / N - NÃO)");

                    b.Property<string>("usu_tipusu")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Tipo do usuário (N1 - 0, N2 - 1, ADM - 2)");

                    b.Property<int>("usu_usualt")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("usu_usubdd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("usu_usucri")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("usu_identi");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("Athena.Models.AtendimentoPlantao", b =>
                {
                    b.HasOne("Athena.Models.CategoriaAtendimento", "CategoriaAtendimento")
                        .WithMany("Atendimentos")
                        .HasForeignKey("atd_cat_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("atd_cat_identi");

                    b.HasOne("Athena.Models.Cliente", "Cliente")
                        .WithMany("Atendimentos")
                        .HasForeignKey("atd_cli_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("atd_cli_identi");

                    b.HasOne("Athena.Models.PreAtendimentoPlantao", "PreAtendimentoPlantao")
                        .WithOne("AtendimentoPlantao")
                        .HasForeignKey("Athena.Models.AtendimentoPlantao", "atd_ptd_identi")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("atd_ptd_identi");

                    b.HasOne("Athena.Models.Usuario", "Usuario")
                        .WithMany("Atendimentos")
                        .HasForeignKey("atd_usu_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("atd_usu_identi");

                    b.Navigation("CategoriaAtendimento");

                    b.Navigation("Cliente");

                    b.Navigation("PreAtendimentoPlantao");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Athena.Models.Cliente", b =>
                {
                    b.HasOne("Athena.Models.LinhaNegocio", "LinhaNegocio")
                        .WithMany("Clientes")
                        .HasForeignKey("cli_lhn_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("cli_lhn_identi");

                    b.Navigation("LinhaNegocio");
                });

            modelBuilder.Entity("Athena.Models.DadosListas", b =>
                {
                    b.HasOne("Athena.Models.TipoDadosListas", "TipoDadosListas")
                        .WithMany("DadosListas")
                        .HasForeignKey("dal_tid_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("dal_tid_identi");

                    b.Navigation("TipoDadosListas");
                });

            modelBuilder.Entity("Athena.Models.DepFunc", b =>
                {
                    b.HasOne("Athena.Models.Departamento", "Departamento")
                        .WithMany("DepFuncs")
                        .HasForeignKey("dfc_dpt_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("dfc_dpt_identi");

                    b.HasOne("Athena.Models.Funcao", "Funcao")
                        .WithMany("DepFuncs")
                        .HasForeignKey("dfc_fnc_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("dfc_fnc_identi");

                    b.HasOne("Athena.Models.Usuario", "Usuario")
                        .WithMany("DepFuncs")
                        .HasForeignKey("dfc_usu_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("dfc_usu_identi");

                    b.Navigation("Departamento");

                    b.Navigation("Funcao");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Athena.Models.PreAtendimentoPlantao", b =>
                {
                    b.HasOne("Athena.Models.Cliente", "Cliente")
                        .WithMany("PreAtendimentos")
                        .HasForeignKey("ptd_cli_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("ptd_cli_identi");

                    b.HasOne("Athena.Models.Usuario", "Usuario")
                        .WithMany("PreAtendimentos")
                        .HasForeignKey("ptd_usu_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("ptd_usu_identi");

                    b.Navigation("Cliente");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Athena.Models.UsuLhn", b =>
                {
                    b.HasOne("Athena.Models.LinhaNegocio", "LinhaNegocio")
                        .WithMany("UsuLhn")
                        .HasForeignKey("uln_lhn_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("uln_lhn_identi");

                    b.HasOne("Athena.Models.Usuario", "Usuario")
                        .WithMany("UsuLhn")
                        .HasForeignKey("uln_usu_identi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("uln_usu_identi");

                    b.Navigation("LinhaNegocio");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Athena.Models.CategoriaAtendimento", b =>
                {
                    b.Navigation("Atendimentos");
                });

            modelBuilder.Entity("Athena.Models.Cliente", b =>
                {
                    b.Navigation("Atendimentos");

                    b.Navigation("PreAtendimentos");
                });

            modelBuilder.Entity("Athena.Models.Departamento", b =>
                {
                    b.Navigation("DepFuncs");
                });

            modelBuilder.Entity("Athena.Models.Funcao", b =>
                {
                    b.Navigation("DepFuncs");
                });

            modelBuilder.Entity("Athena.Models.LinhaNegocio", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("UsuLhn");
                });

            modelBuilder.Entity("Athena.Models.PreAtendimentoPlantao", b =>
                {
                    b.Navigation("AtendimentoPlantao");
                });

            modelBuilder.Entity("Athena.Models.TipoDadosListas", b =>
                {
                    b.Navigation("DadosListas");
                });

            modelBuilder.Entity("Athena.Models.Usuario", b =>
                {
                    b.Navigation("Atendimentos");

                    b.Navigation("DepFuncs");

                    b.Navigation("PreAtendimentos");

                    b.Navigation("UsuLhn");
                });
#pragma warning restore 612, 618
        }
    }
}
